#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π startup —Å–∫—Ä–∏–ø—Ç –¥–ª—è ALPACA Test Bench.
"""

import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "src"))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    parser = argparse.ArgumentParser(
        description="ALPACA Test Bench - –ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫ –æ—Ü–∏—Ñ—Ä–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # Streamlit UI
    ui_parser = subparsers.add_parser('ui', help='–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    ui_parser.add_argument('--port', type=int, default=8501, help='–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    ui_parser.add_argument('--host', default='localhost', help='–•–æ—Å—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    
    # CLI –∫–æ–º–∞–Ω–¥—ã
    cli_parser = subparsers.add_parser('cli', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
    cli_parser.add_argument('cli_args', nargs='*', help='–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è CLI')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    setup_parser = subparsers.add_parser('setup', help='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    setup_parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_parser = subparsers.add_parser('check', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    check_parser.add_argument('--install', action='store_true', help='–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    
    args = parser.parse_args()
    
    if args.command == 'ui':
        run_streamlit_ui(args.host, args.port)
    elif args.command == 'cli':
        run_cli(args.cli_args)
    elif args.command == 'setup':
        setup_system(args.force)
    elif args.command == 'check':
        check_dependencies(args.install)
    else:
        parser.print_help()


def run_streamlit_ui(host: str = 'localhost', port: int = 8501):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    import subprocess
    import sys
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ http://{host}:{port}")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        streamlit_app = project_root / "src" / "ui" / "streamlit_app.py"
        cmd = [
            sys.executable, "-m", "streamlit", "run",
            str(streamlit_app),
            "--server.address", host,
            "--server.port", str(port),
            "--server.headless", "true"
        ]
        
        subprocess.run(cmd, check=True)
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Streamlit: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Streamlit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install streamlit")
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_cli(cli_args: list):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
    import sys
    
    try:
        from src.cli import cli
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ CLI
        sys.argv = ['alpaca-cli'] + cli_args
        cli()
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CLI: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CLI: {e}")


def setup_system(force: bool = False):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    print("üõ†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ALPACA Test Bench...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = [
        "test_files",
        "outputs", 
        "logs",
        "configs"
    ]
    
    for dir_name in directories:
        dir_path = project_root / dir_name
        if not dir_path.exists() or force:
            dir_path.mkdir(exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        sys.path.insert(0, str(project_root / "src"))
        from configs.system_configurator import create_sample_config
        
        config_file = project_root / "configs" / "system_config.json"
        if not config_file.exists() or force:
            create_sample_config()
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        else:
            print("‚ÑπÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    env_file = project_root / ".env"
    env_example = project_root / ".env.example"
    
    if env_example.exists() and (not env_file.exists() or force):
        try:
            env_content = env_example.read_text(encoding='utf-8')
            env_file.write_text(env_content, encoding='utf-8')
            print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è .env")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}")
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py ui")
    print("–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ CLI: python main.py cli --help")


def check_dependencies(install: bool = False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'streamlit',
        'fastapi', 
        'pandas',
        'plotly',
        'click',
        'python-docx',
        'PyPDF2',
        'pdfplumber'
    ]
    
    optional_packages = [
        'pymupdf',
        'pdfminer.six', 
        'camelot-py',
        'tesseract',
        'easyocr',
        'markdownify',
        'html2text',
        'beautifulsoup4'
    ]
    
    missing_required = []
    missing_optional = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            missing_required.append(package)
            print(f"‚ùå {package} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    for package in optional_packages:
        try:
            if package == 'pymupdf':
                __import__('fitz')
            elif package == 'tesseract':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª tesseract
                import shutil
                if shutil.which('tesseract'):
                    print(f"‚úÖ {package}")
                else:
                    raise ImportError()
            else:
                __import__(package.replace('-', '_'))
                print(f"‚úÖ {package} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)")
        except ImportError:
            missing_optional.append(package)
            print(f"‚ö†Ô∏è  {package} (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info >= (3, 9):
        print(f"‚úÖ Python {sys.version}")
    else:
        print(f"‚ö†Ô∏è  Python {sys.version} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.9+)")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –°–≤–æ–¥–∫–∞:")
    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: {len(required_packages) - len(missing_required)}/{len(required_packages)}")
    print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: {len(optional_packages) - len(missing_optional)}/{len(optional_packages)}")
    
    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_required:
            print(f"  ‚Ä¢ {package}")
        
        if install:
            print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            install_packages(missing_required)
    
    if missing_optional:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_optional:
            print(f"  ‚Ä¢ {package}")
        
        if install:
            print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            install_packages(missing_optional, optional=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_special_dependencies()


def install_packages(packages: list, optional: bool = False):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —á–µ—Ä–µ–∑ pip."""
    import subprocess
    import sys
    
    for package in packages:
        try:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            subprocess.run([sys.executable, "-m", "pip", "install", package], 
                         check=True, capture_output=True)
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")
            if not optional:
                print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install {package}")


def check_special_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Tesseract, LibreOffice –∏ —Ç.–¥.)."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    # Tesseract OCR
    import shutil
    if shutil.which('tesseract'):
        try:
            import subprocess
            result = subprocess.run(['tesseract', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            version = result.stdout.split('\n')[0]
            print(f"‚úÖ {version}")
        except:
            print("‚ö†Ô∏è  Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏–µ–π")
    else:
        print("‚ùå Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: https://github.com/UB-Mannheim/tesseract/wiki")
    
    # LibreOffice (–¥–ª—è .doc —Ñ–∞–π–ª–æ–≤)
    libreoffice_paths = [
        'libreoffice', 'soffice',
        'C:\\Program Files\\LibreOffice\\program\\soffice.exe'
    ]
    
    libreoffice_found = False
    for path in libreoffice_paths:
        if shutil.which(path) or Path(path).exists():
            print("‚úÖ LibreOffice –Ω–∞–π–¥–µ–Ω")
            libreoffice_found = True
            break
    
    if not libreoffice_found:
        print("‚ö†Ô∏è  LibreOffice –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ .doc —Ñ–∞–π–ª–æ–≤)")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: https://www.libreoffice.org/download/")
    
    # Pandoc (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
    if shutil.which('pandoc'):
        print("‚úÖ Pandoc –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è  Pandoc –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: https://pandoc.org/installing.html")


if __name__ == "__main__":
    main()